@page "/test"
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h1>ClaimsPrincipal Data</h1>

<p>@authMessage</p>

@if (!isAuthenticated)
{
    <button @onclick="Login">Login</button>
}
else
{
    <button @onclick="Logout">Logout</button>
}

@if (claims.Any())
{
    <ul>
        @foreach (var claim in claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
}

@code {
    private string? authMessage;
    private bool isAuthenticated = false;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    private bool _rendered = false; // Indique si le composant a terminé de rendre

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // S'assure que le rendu est terminé avant d'appeler l'authentification
        if (firstRender && !_rendered)
        {
            _rendered = true;
            await GetClaimsPrincipalData();
            StateHasChanged(); // Re-rend la page avec les nouvelles données
        }
    }

    private async Task GetClaimsPrincipalData()
    {
        // Vérifie l'état d'authentification
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            authMessage = $"{user.Identity.Name} is authenticated.";
            claims = user.Claims;
            isAuthenticated = true;
        }
        else
        {
            authMessage = "The user is NOT authenticated.";
            isAuthenticated = false;
        }
    }

    private async Task Login()
    {
        var identity = new ClaimsIdentity(new[]
        {
            new Claim(ClaimTypes.Name, "testuser"),
            new Claim(ClaimTypes.Email, "testuser@example.com"),
        }, "Fake authentication type");

        var user = new ClaimsPrincipal(identity);
        await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(user);

        await GetClaimsPrincipalData();
    }

    private async Task Logout()
    {
        await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();
        await GetClaimsPrincipalData();
    }
}
